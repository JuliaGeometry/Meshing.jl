var documenterSearchIndex = {"docs":
[{"location":"api/#API-1","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Quick-Start-1","page":"API","title":"Quick Start","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"This package inherits the mesh types from GeometryTypes.jl.","category":"page"},{"location":"api/#","page":"API","title":"API","text":"The algorithms operate on a Function or a SignedDistanceField and output a concrete AbstractMesh. For example:","category":"page"},{"location":"api/#","page":"API","title":"API","text":"using Meshing\nusing GeometryTypes\nusing LinearAlgebra: dot, norm\nusing FileIO\n\n# Mesh an equation of sphere in the Axis-Aligned Bounding box starting\n# at -1,-1,-1 and widths of 2,2,2\nm = GLNormalMesh(HyperRectangle(Vec(-1,-1,-1.), Vec(2,2,2.)), MarchingCubes()) do v\n    sqrt(sum(dot(v,v))) - 1\nend\n\n# save the Sphere as a PLY file\nsave(\"sphere.ply\",m)","category":"page"},{"location":"api/#","page":"API","title":"API","text":"The general API is: (::Type{MT})(sdf::Function, method::AbstractMeshingAlgorithm) where {MT <: AbstractMesh} or (::Type{MT})(sdf::SignedDistanceField, method::AbstractMeshingAlgorithm) where {MT <: AbstractMesh}","category":"page"},{"location":"api/#","page":"API","title":"API","text":"For a full listing of concrete AbstractMesh types see GeometryTypes.jl mesh documentation.","category":"page"},{"location":"api/#Meshing-Algorithms-1","page":"API","title":"Meshing Algorithms","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"Three meshing algorithms exist:","category":"page"},{"location":"api/#","page":"API","title":"API","text":"MarchingCubes()\nMarchingTetrahedra()\nNaiveSurfaceNets()","category":"page"},{"location":"api/#","page":"API","title":"API","text":"Each takes an optional iso and eps parameter, e.g. MarchingCubes(0.0,1e-6).","category":"page"},{"location":"api/#","page":"API","title":"API","text":"Here iso controls the offset for the boundary detection. By default this is set to 0. eps is the detection tolerance for a voxel edge intersection.","category":"page"},{"location":"api/#","page":"API","title":"API","text":"Below is a comparison of the algorithms:","category":"page"},{"location":"api/#","page":"API","title":"API","text":"Algorithm Accurate Manifold Performance Penalty Face Type\nMarchingCubes Yes No ~2x Triangle\nMarchingTetrahedra Yes Yes ~3x Triangle\nNaiveSurfaceNets No Yes 1x Quad","category":"page"},{"location":"examples/#Examples-1","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#NRRD-Data-1","page":"Examples","title":"NRRD Data","text":"","category":"section"},{"location":"#Meshing.jl-1","page":"Meshing.jl","title":"Meshing.jl","text":"","category":"section"},{"location":"#","page":"Meshing.jl","title":"Meshing.jl","text":"This package provides a comprehensive suite of meshing (isosurface extraction) algorithms.","category":"page"},{"location":"#","page":"Meshing.jl","title":"Meshing.jl","text":"Algorithms included:","category":"page"},{"location":"#","page":"Meshing.jl","title":"Meshing.jl","text":"Marching Tetrahedra\nMarching Cubes\nNaive Surface Nets","category":"page"},{"location":"internals/#Internals-1","page":"Internals","title":"Internals","text":"","category":"section"},{"location":"internals/#Marching-Cubes-1","page":"Internals","title":"Marching Cubes","text":"","category":"section"},{"location":"internals/#Marching-Tetrahedra-1","page":"Internals","title":"Marching Tetrahedra","text":"","category":"section"},{"location":"internals/#Surface-Nets-1","page":"Internals","title":"Surface Nets","text":"","category":"section"}]
}
